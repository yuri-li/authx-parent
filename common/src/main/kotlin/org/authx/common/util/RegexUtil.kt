package org.authx.common.util

import java.util.regex.Pattern

object RegexUtil {
    const val ONLY_6_NUM = "^[0-9]{6}$" //6位数字，otp code专用
    const val NAME = "^[A-Za-z0-9_]+$" //字母+数字+下划线
    const val ONLY_LETTER_AND_NUM = "^[A-Za-z0-9]+$" //字母+数字
    const val CHINESE = "^[\u4e00-\u9fa5]+$" //中文
    const val USERNAME = "^(?![0-9]+$)[0-9A-Za-z]{4,12}$" //用户名格式，字母+数字，且不能全是数字
    const val BANK_ACCOUNT_NAME = "^[\\u4e00-\\u9fa5]{1}([·•● ]?[\\u4e00-\\u9fa5]){1,14}$|^[a-zA-Z\\s]{4,30}$" //银行卡的账户名称，允许是中文，也可以是英文
    /**
     * 移动号段: 134(0-8)、135、136、137、138、139、147、150、151、152、157、158、159、178、182、183、184、187、188、198 联通号段: 130、131、132、155、156、145、175、176、185、186、166 电信号段:
     * 133、149、153、173、177、180、181、189、199
     */

    const val EMAIL = "^([a-z0-9A-Z]+[-|\\.|_]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\.)+[a-zA-Z]{2,}$" //邮箱
    const val MOBILE = "^134[0-8]\\d{7}$|^13[^4]\\d{8}$|^14[5-9]\\d{8}$|^15[^4]\\d{8}$|^16[6]\\d{8}$|^17[0-8]\\d{8}$|^18[\\d]{9}$|^19[8,9]\\d{8}$" //手机号码
    /**
     * 1、前两位： 11:北京,12:天津,13:河北,14:山西,15:内蒙古,21:辽宁,22:吉林,23:黑龙江,31:上海,32:江苏,33:浙江,34:安徽, 35:福建,36:江西,37:山东,41:河南,42:湖北,43:湖南,44:广东,45:广西,46:海南,50:重庆,51:四川,52:贵州,
     * 53:云南,54:西藏,61:陕西,62:甘肃,63:青海,64:宁夏,65:新疆,71:台湾,81:香港,82:澳门,91:国外
     *
     * 2、四位任意数字
     * 3、18位的身份证号
     *  1）年月日，8位数字，如：19960809，20000101
     *  2）3个任意数字
     *  3）X或x或1位任意数字
     * 4、15位的身份证号
     *  1）2位任意的数字
     *  2）年月日，6位数字，如：860809,000101
     *  3）1位任意数字（男：单数，女：双数）
     */
    const val ID_CARD = "((11|12|13|14|15|21|22|23|31|32|33|34|35|36|37|41|42|43|44|45|46|50|51|52|53|54|61|62|63|64|65)[0-9]{4})(([1|2][0-9]{3}[0|1][0-9][0-3][0-9][0-9]{3}[Xx0-9])|([0-9]{2}[0|1][0-9][0-3][0-9][0-9]{3}))" //身份证
    const val URL = "(?i)^((https?|ftp)://)?(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$" //URL
    const val IP_ADDR = "([1-9]|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])(\\.(\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])){3}" //IP地址
    const val QQ = "^[1-9][0-9]{4,10}$" //QQ号

    /**
     * 允许value为空
     */
    fun matchNull(regex: String, value: String?): Boolean {
        if (value == null || value.isEmpty()) {
            return true
        }
        return Pattern.matches(regex, value)
    }

    /**
     * 不允许value为空，且，完全匹配规则
     */
    fun match(regex: String, value: String): Boolean {
        if (value.isEmpty()) {
            return false
        }
        return Pattern.matches(regex, value)
    }
}